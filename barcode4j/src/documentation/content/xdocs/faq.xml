<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE faqs PUBLIC "-//APACHE//DTD FAQ V1.1//EN" "dtd/faq-v11.dtd">

<faqs title="Frequently Asked Questions">

  <part id="problems">
    <title>Problems</title>
    <faq id="printing-quality">
      <question>
        My barcode scanner can't read the barcode.
      </question>
      <answer>
        <p>
          There are many things that can go wrong when you generate and print 
          barcodes. Please go to the 
          <link href="troubleshooting.html#printing-quality">Troubleshooting page</link> for more
          information.
        </p>
      </answer>
    </faq>
    <faq id="wrong-characters">
      <question>
        My barcode scanner sends some wrong characters.
      </question>
      <answer>
        <p>
          Please consult the <link href="troubleshooting.html#wrong-characters">Troubleshooting page</link>
          for more information.
        </p>
      </answer>
    </faq>
    <faq id="avalon-framework">
      <question>
        I've got error messages that contain the words "avalon" and "framework". What's wrong?
      </question>
      <answer>
        <p>
          Most probably you have an outdated version of 
          <fork href="ext:avalon">Avalon Framework</fork> in your classpath. This can happen if
          you're working with FOP 0.20.5, for example, which contains an older version of 
          Avalon Framework. Please use the one supplied with Barcode4J or download the 
          latest release directly from the <fork href="ext:avalon">Avalon site</fork>.
        </p>
      </answer>
    </faq>
  </part>
  <part id="docs">
    <title>Documentation</title>
    <faq id="forrest">
      <question>
        How can I help write documentation?
      </question>
      <answer>
        <p>
          This project uses <link href="ext:forrest">Apache Forrest</link> to
          generate documentation from XML. Please download a copy of Forrest,
          which can be used to <link
            href="ext:forrest/validation">validate</link>, <link
            href="ext:forrest/webapp">develop</link> and render a project site.
        </p>
      </answer>
    </faq>
    <!-- More faqs or parts here -->
  </part>
  <part id="java">
  	<title>Java</title>
  	<faq id="classpath">
  		<question>
  			What's this "classpath" thing?
  		</question>
  		<answer>
  			<p>
  				The classpath is a set of locations where the Java Virtual Machine (JVM) 
  				can load Java code from. In the easiest case, the classpath is simply a
  				directory, but normally the classpath consists of a list of filenames
  				pointing to JAR files (essentially ZIP files with some special extensions).
  				Barcode4J delivers several such JAR files. Let's see what the classpath 
  				looks like when you want to run Barcode4J from the command-line:
  			</p>
        <source><![CDATA[
Windows: java -cp lib\avalon-framework-4.1.5.jar;lib\commons-cli-1.0.jar;build\barcode4j.jar org.krysalis.barcode4j.cli.Main
Unix:    java -cp lib\avalon-framework-4.1.5.jar:lib\commons-cli-1.0.jar:build\barcode4j.jar org.krysalis.barcode4j.cli.Main]]>
        </source>
        <note>
        	Instead of "-cp" you can also use "-classpath".
        </note>
      	<p>
      		The above works fine under JDK 1.4.x or higher. If you use JDK 1.3.x you 
      		need to add XML support (JAXP, Xerces and Xalan). Only JDK 1.4 has XML 
      		support built-in. You would add these libraries using the same pattern as
      		shown above.
      	</p>
  		</answer>
  	</faq>
  	<faq id="endorsement">
  		<question>
  			How do I make sure the right XML parser and the right XSLT engine are used under JDK 1.4.x and higher?
  		</question>
  		<answer>
  			<p>
  				Since JDK 1.4 Java comes with XML support built-in. XML support comprises 
  				the JAXP API (SAX, DOM, parsing and XSLT processing APIs) plus implementations
  				(Crimson/Xerces-J for basic XML support and Xalan-J as XSLT engine).
  			</p>
  			<p>
  			  By default, the implementations coming with the JDK are used even if you have
  			  different JAXP implementations in your classpath. There's a mechanism called 
  			  "Endorsed Standards Override Mechanism" that allows you to override the default
  			  XML implementations with your own. See 
  			  <fork href="http://xml.apache.org/xalan-j/faq.html#faq-N100CB">Xalan-J's FAQ entry</fork>
  			  or the 
  			  <fork href="http://java.sun.com/j2se/1.4/docs/guide/standards/">documentation from Sun</fork>.
  			</p>
  		</answer>
  	</faq>
		<faq id="headless">
			<question>
				What do I need to do to run Barcode4J on a "headless" server?
			</question>
			<answer>
				<p>
					Some output formats like EPS and SVG work on a headless server without any precautions, 
					since they don't use any of the AWT infrastructure.
				</p>
				<p>
					However, if you use AWT or bitmap output Barcode4J needs a functional graphical 
					environment. Furthermore, if you generate SVG barcode in conjunction with Apache FOP
					you will need a graphical environment since FOP uses Batik to render the barcodes. 
					Batik needs the graphical environment to work.
				</p>
				<p>
					The work-arounds are the same as for Apache FOP:
				</p>
        <ul>
          <li>
            If you are using JDK 1.4 or later, start it with the -Djava.awt.headless=true 
            command line option.
          </li>
          <li>
            Install an X server which provides an in-memory framebuffer without actually 
            using a screen device or any display hardware. One example is Xvfb.
          </li>
          <li>
            Install a toolkit which emulates AWT without the need for an underlying X 
            server. One example is the 
            <fork href="http://www.eteks.com/pja/en/">PJA toolkit</fork>, which is 
            free and comes with detailed installation instructions.
          </li>
				</ul>
			</answer>
		</faq>
  </part>
  <!-- More faqs or parts here -->
</faqs>
